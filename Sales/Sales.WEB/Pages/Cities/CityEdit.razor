@page "/cities/edit/{CityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Cuidad</h3>

@if (city == null)
{
     <div class="spinner"/>
}
else
{
    <CityForm @ref="cityForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private City? city;
    //Referenciamos el formulario CountryForm
    private CityForm? cityForm;

    [Parameter]
    public int CityId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<City>($"api/cities/{CityId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("countries");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        city = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("api/cities", city);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        cityForm!.FormPostedSuccessfully = true;
        //metodo para navegar 
        navigationManager.NavigateTo($"states/details/{city!.StateId}");
    }
}