@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]


@if (Countries is null)
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="bi bi-globe"></i> Países
                <a class="btn btn-sm btn-primary float-end" href="/countries/create"><i class="bi bi-plus"></i> Adicionar País</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="bi bi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="bi bi-ban" /> Limpiar</button>
                </div>
            </div>


            <Pagination CurrentPage="currentPage"
                        TotalPages="totalPages"
                        SelectedPage="SelectedPageAsync" />


            <GenericList MyList="Countries">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>País</th>
                                <th style="width:220px">Estado / Departamentos</th>
                                <th style="width:260px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var country in Countries!)
                            {
                                <tr>

                                    <td>
                                        @country.Name
                                    </td>
                                    <td>
                                        @country.StatesNumber
                                    </td>

                                    <td>
                                        <a href="/countries/details/@country.Id" class="btn btn-info btn-sm"><i class="bi bi-list" /> Detalles</a>
                                        <a href="/countries/edit/@country.Id" class="btn btn-warning btn-sm"><i class="bi bi-pencil" /> Editar</a>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(country.Id))><i class="bi bi-trash" /> Borrar</button>

                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>

        </div>
    </div>
}

@code {

    private int currentPage = 1;
    private int totalPages;

    public List<Country>? Countries { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/countries?page={page}";
            url2 = $"api/countries/totalPages";
        }
        else
        {
            url1 = $"api/countries?page={page}&filter={Filter}";
            url2 = $"api/countries/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Country>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Countries = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }

    }

    private async Task DeleteAsync(int ContryId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/countries/{ContryId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }

        }

        await LoadAsync();
    }

    //Metodo para limpiar
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }
    //Metodo para aplicar el filtro
    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}
